Web Application Security Vulnerabilities
Cross-site Scripting (XSS): Reflected, Persistent and DOM-based XSS
A type of computer security vulnerability typically found in web applications. XSS enables attackers to inject client-side scripts into web pages viewed by other users. A cross-site scripting vulnerability may be used by attackers to bypass access controls such as the same-origin policy.
   - Services: http, https
   - Processes: Apache, Nginx, Microsoft IIS, Tomcat


SQL Injection (SQLi)
SQL (Structured Query Language) injection is a vulnerability where an attacker can perform malicious query directly to the database resulting in compromise of whole system. It normally happens when an application accepts user input and takes that to query directly without any sort of sanitization and hence the databse takes it as a legitimate query and performs the task as per user input. An easy remediation for this is to use prepared statements or completely escape the user inputs.
   - Services:
   - Processes: MySQL, PostgreSQL, SQL Server, Microsoft Exchange, Sendmail

Cross-site Request Forgery (CSRF)
While performing any changes in an account in an application, it always needs a CSRF token in order to validate the request and know that it is performed by the legitimate user themselves. But when that validation does not work or is improperly configured then an attacker can create a similar looking form to send the request and let victim unknowingly send the request which leads in changes in the account of the victim. It is more like : Malicious form --> victim submits it unknowingly --> Unwanted action on victim side takes place.

   - Services: http, https
   - Processes: Apache, Nginx, Microsoft IIS, Tomcat

Server Side Request Forgery (SSRF)
It is a type of vulnerability where an attacker can request the internal resources which are mostly behind the NAT and firewall and aren't accessbile remotely. It is also a result of unsanitized user input directly being used in the code. An attacker can call the response for /etc/passwd, /etc/shadow, files which are unix password files alongside the resources in the localhost.

   - Services: http, https
   - Processes: Apache, Nginx, Tomcat

Remote File Inclusion (RFI)
Remote File Inclusion. Remote File Include (RFI) is an attack technique used to exploit "dynamic file include" mechanisms in web applications. When web applications take user input (URL, parameter value, etc.) and pass them into file include commands, the web application might be tricked into including remote files with malicious code.

   - Services: http, https
   - Processes: Apache, Nginx, Tomcat


Local File Inclusion (LFI)
Local File Inclusion (LFI) allows an attacker to include files on a server through the web browser. This vulnerability exists when a web application includes a file without correctly sanitising the input, allowing and attacker to manipulate the input and inject path traversal characters and include other files from the web server.

   - Services: http, https
   - Processes: Apache, Nginx, Tomcat

Remote Code Execution (RCE)
Remote code execution can be best described as an action which involves an attacker executing code remotely using system vulnerabilities. Such code can run from a remote server, which means that the attack can originate from anywhere around the world giving the attacker access to the PC.

   - Services: ssh, http, https
   - Processes: Apache, Nginx, Tomcat

CRLF Injection
A CRLF injection attack is one of several types of injection attacks.It can be used to escalate to more malicious attacks such as Cross-site Scripting (XSS), page injection, web cache poisoning, cache-based defacement, and more.

   - Services: http
   - Processes: Apache, Nginx

LDAP Injection
LDAP Injection is an attack used to exploit web based applications that construct LDAP statements based on user input. When an application fails to properly sanitize user input, it's possible to modify LDAP statements using a local proxy.

   - Services: ldap
   - Processes: Active Directory, LDAP

Failure to restrict URL Access
Web applications check URL access rights before rendering protected links and buttons. Applications need to perform similar access control checks each time these pages are accessed. In most of the applications, the privileged pages, locations and resources are not presented to the privileged users. By an intelligent guess, an attacker can access privilege pages. An attacker can access sensitive pages, invoke functions and view confidential information. Making use of this vulnerability, attacker can gain access to the unauthorized URLs, without logging into the application and exploit the vulnerability. An attacker can access sensitive pages, invoke functions and view confidential information.

    - Services: http, https
    - Processes: Apache, Nginx


Insufficient Transport Layer Protection
Deals with information exchange between the user (client) and the server (application). Applications frequently transmit sensitive information like authentication details, credit card information, and session tokens over a network. By using weak algorithms or using expired or invalid certificates or not using SSL can allow the communication to be exposed to untrusted users, which may compromise a web application and or steal sensitive information. Making use of this web security vulnerability, an attacker can sniff legitimate user's credentials and gaining access to the application. Can steal credit card information.

    - Services: http, ftp, smtp
    - Processes: All web servers and email servers


Unvalidated Redirects and Forwards
The web application uses few methods to redirect and forward users to other pages for an intended purpose. If there is no proper validation while redirecting to other pages, attackers can make use of this and can redirect victims to phishing or malware sites, or use forwards to access unauthorized pages. An attacker can send a URL to the user that contains a genuine URL appended with encoded malicious URL. A user by just seeing the genuine part of the attacker sent URL can browse it and may become a victim.

    - Services: http, https
    - Processes: Apache, Nginx


Insecure Cryptographic Storage
Insecure Cryptographic storage is a common vulnerability which exists when the sensitive data is not stored securely. The user credentials, profile information, health details, credit card information, etc. come under sensitive data information on a website. This data will be stored on the application database. When this data are stored improperly by not using encryption or hashing*, it will be vulnerable to the attackers. By using this vulnerability, an attacker can steal, modify such weakly protected data to conduct identity theft, credit card fraud or other crimes.

    - Services: smtp, smtps
    - Processes: Microsoft Exchange, Postfix, Sendmail


Security Misconfiguration
Security Configuration must be defined and deployed for the application, frameworks, application server, web server, database server, and platform. If these are properly configured, an attacker can have unauthorized access to sensitive data or functionality. Making use of this vulnerability, the attacker can enumerate the underlying technology and application server version information, database information and gain information about the application to mount few more attacks.
    - Services: All services
    - Processes: All processes


Insecure Direct Object References
It occurs when a developer exposes a reference to an internal implementation object, such as a file, directory, or database key as in URL or as a FORM parameter. The attacker can use this information to access other objects and can create a future attack to access the unauthorized data. Using this vulnerability, an attacker can gain access to unauthorized internal objects, can modify data or compromise the application.

    - Services: http, https
    - Processes: Apache, Nginx, Tomcat


Server-Side Template Injection
Template engines are widely used by web applications to present dynamic data via web pages and emails. Unsafely embedding user input in templates enables Server-Side Template Injection, a frequently critical vulnerability that is extremely easy to mistake for Cross-Site Scripting (XSS), or miss entirely. Unlike XSS, Template Injection can be used to directly attack web servers' internals and often obtain Remote Code Execution (RCE), turning every vulnerable application into a potential pivot point.

    - Services: http, https
    - Processes: Apache, Nginx, Tomcat


DNS Zone Transfer (AXFR Vulnerability)
AXFR offers no authentication, so any client can ask a DNS server for a copy of the entire zone. This means that unless some kind of protection is introduced, an attacker can get a list of all hosts for a domain, which gives them a lot of potential attack vectors.

    - Services: dns
    - Processes: BIND DNS server


HTTP Request Smuggling
HTTP Request Smuggling is technique for interfering the way a website processes sequences of HTTP requests from front end servers (usually from loadbalancers or reverse proxies) to back end servers. When an attacker manages to send ambigious request to the server utilising this similar architecture resulting in the different interpretation of the same request by front end and back end, then this vulnerability arises. It usually happens on clear text versions of HTTP.

    - Services: http
    - Processes: Apache, Nginx


RPO Attack
RPO (Relative Path Overwrite) relative path coverage, as a relatively new type of attack, first proposed by Gareth Heyes in 2014, uses differences between URL resolutions between nginx servers, misconfigured Apache servers, and browsers. , And use the css or js of the relative path included in the file to read css or js across directories, or even parse a page that is not css or js as css or js, triggering further attacks such as xss.

    - Services: smtp
    - Processes: Microsoft Exchange, Postfix


XML Injection
XML Injection is an attack technique used to manipulate or compromise the logic of an XML application or service. The injection of unintended XML content and/or structures into an XML message can alter the intend logic of the application. Further, XML injection can cause the insertion of malicious content into the resulting message/document.

    - Services: http, https
    - Processes: Tomcat, Apache


Race Condition
A race condition is a flaw that produces an unexpected result when the timing of actions impact other actions. An example may be seen on a multithreaded application where actions are being performed on the same data. Race conditions, by their very nature, are difficult to test for.

    - Services: All services
    - Processes: All processes

Web Cache Deception
Modern Web Applications uses cache for storing information on client side so that another time insted of loading files from server, it can load from your cache instead, making the site speed faster. Generally, the files which are retireved often by a web application is cached to reduce latency from the server.
However, if an attacker leverages this opportunity to cache the URL endpoints which may contatin sensitive information and thus making the information publicy accessible, the website is vulnerable to Web Cache Deception Attack.
Let's take an example of a website : https://www.samplewebsite.com/user-1/home.php
Here as we see that there are many users and contents of users are stored on a server, the website processes the endpoint dynamically, as it is different for different users. Such type of personalized data is not cached. But most static files such as stylesheets, scripts and text files are cached. So, what if we request a non-existent statis files such as https://www.samplewebsite.com/user-1/home.php/style.css.
A GET request will be produced by a browser and if the web-app is not configured properly, the server returns the contents of https://www.samplewebsite.com/user-1/home.php which shouldn't be available. In this way an attacker can leverage a Web Cache Deception attack which may lead to information disclosure.

    - Services: http, https
    - Processes: Apache, Nginx



To provide an accurate mapping of vulnerabilities to specific versions of the listed services and processes, a comprehensive database or resource is typically required, such as the National Vulnerability Database (NVD) or other security advisories. However, I can provide a general overview of common vulnerabilities associated with these services and processes.

### Common Vulnerabilities by Service/Process

#### Services

1. **SSH**
   - Vulnerabilities: Weak ciphers, improper authentication methods, outdated implementations.

2. **FTP**
   - Vulnerabilities: Cleartext transmission, anonymous access, command injection.

3. **HTTP**
   - Vulnerabilities: Cross-Site Scripting (XSS), SQL Injection, CSRF, insecure cookies.

4. **Samba**
   - Vulnerabilities: Remote code execution, privilege escalation, misconfigurations.

5. **SMTP**
   - Vulnerabilities: Open relays, email spoofing, command injection.

6. **DNS**
   - Vulnerabilities: DNS amplification attacks, zone transfer vulnerabilities, cache poisoning.

7. **NTP**
   - Vulnerabilities: NTP amplification attacks, unauthorized access to configurations.

8. **HTTPS**
   - Vulnerabilities: SSL/TLS vulnerabilities (e.g., POODLE, Heartbleed), certificate validation issues.

9. **RDP**
   - Vulnerabilities: BlueKeep (CVE-2019-0708), credential theft, weak encryption protocols.

10. **RPC**
    - Vulnerabilities: Buffer overflows, improper access controls.

11. **Telnet**
    - Vulnerabilities: Cleartext transmission, weak authentication.

12. **NetBIOS**
    - Vulnerabilities: Name resolution vulnerabilities, SMB relay attacks.

13. **SMTPS**
    - Vulnerabilities: Misconfigured servers, weak ciphers.

14. **FTPS**
    - Vulnerabilities: Misconfigured servers, weak ciphers.

#### Processes

1. **Tomcat**
   - Vulnerabilities: Remote code execution, session fixation, misconfigurations.

2. **DACLsvc (Distributed Access Control List Service)**
   - Vulnerabilities: Improper access control leading to privilege escalation.

3. **Schtask**
   - Vulnerabilities: Insecure task scheduling leading to privilege escalation.

4. **Apache**
   - Vulnerabilities: Directory traversal, XSS, server misconfigurations.

5. **Nginx**
   - Vulnerabilities: Buffer overflow, misconfiguration leading to information disclosure.

6. **Microsoft IIS**
   - Vulnerabilities: WebDAV exploits, directory traversal, misconfigurations.

7. **MySQL**
   - Vulnerabilities: SQL Injection, privilege escalation.

8. **PostgreSQL**
   - Vulnerabilities: SQL Injection, privilege escalation.

9. **SQL Server**
   - Vulnerabilities: SQL Injection, misconfigurations, privilege escalation.

10. **Microsoft Exchange**
    - Vulnerabilities: Remote code execution, unauthorized access due to misconfiguration.

11. **Postfix**
    - Vulnerabilities: Open relay, command injection.

12. **Sendmail**
    - Vulnerabilities: Buffer overflow, command injection.

13. **BitTorrent**
    - Vulnerabilities: Peer-to-peer exposure leading to data leakage.

14. **SMB (Server Message Block)**
    - Vulnerabilities: EternalBlue (CVE-2017-0144), man-in-the-middle attacks.

15. **NFS (Network File System)**
    - Vulnerabilities: Unauthorized access due to misconfiguration.

16. **Active Directory**
    - Vulnerabilities: Kerberos ticket granting ticket (TGT) vulnerabilities, privilege escalation.

17. **LDAP (Lightweight Directory Access Protocol)**
    - Vulnerabilities: LDAP injection, unauthorized access due to misconfiguration.
